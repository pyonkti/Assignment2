// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)
/**
 * Player
 * 
 * @param {Phaser.Game}
 *            aGame A reference to the currently running game.
 * @param {Number}
 *            aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number}
 *            aY The y coordinate (in world space) to position the Sprite at.
 * @param {any}
 *            aKey This is the image or texture used by the Sprite during
 *            rendering. It can be a string which is a reference to the Cache
 *            entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any}
 *            aFrame If this Sprite is using part of a sprite sheet or texture
 *            atlas you can specify the exact frame to use by giving a string or
 *            numeric index.
 */
function Player(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'atlas',
			aFrame == undefined || aFrame == null ? 'player-idle/player-idle-3'
					: aFrame);
	this.anchor.setTo(0.5, 0.5);
	var _anim_idle = this.animations.add('idle', [ 'player-idle/player-idle-1',
			'player-idle/player-idle-2', 'player-idle/player-idle-3',
			'player-idle/player-idle-4', 'player-idle/player-idle-5',
			'player-idle/player-idle-6', 'player-idle/player-idle-7',
			'player-idle/player-idle-8', 'player-idle/player-idle-9' ], 12,
			true);
	this.animations.add('skip', [ 'player-skip/player-skip-1',
			'player-skip/player-skip-2', 'player-skip/player-skip-3',
			'player-skip/player-skip-4', 'player-skip/player-skip-5',
			'player-skip/player-skip-6', 'player-skip/player-skip-7',
			'player-skip/player-skip-8' ], 12, true);
	this.animations.add('jump', [ 'player-jump/player-jump-1',
			'player-jump/player-jump-2', 'player-jump/player-jump-3',
			'player-jump/player-jump-4' ], 12, true);
	this.animations.add('fall', [ 'player-fall/player-fall-1',
			'player-fall/player-fall-2', 'player-fall/player-fall-3',
			'player-fall/player-fall-4' ], 12, true);
	this.animations.add('duck', [ 'player-duck/player-duck-1',
			'player-duck/player-duck-2', 'player-duck/player-duck-3',
			'player-duck/player-duck-4' ], 12, true);
	this.animations.add('hurt', [ 'player-hurt/player-hurt-1',
			'player-hurt/player-hurt-2' ], 12, true);
	this.animations.add('climb', [ 'player-climb/player-climb-1',
			'player-climb/player-climb-2', 'player-climb/player-climb-3',
			'player-climb/player-climb-4' ], 12, true);
	_anim_idle.play();
	this.game.physics.arcade.enable(this);
	this.body.setSize(12.0, 26.0, 10.0, 6.0);
	this.body.gravity.y = 300.0;

	this.afterCreate();

}

/** @type Phaser.Sprite */
var Player_proto = Object.create(Phaser.Sprite.prototype);
Player.prototype = Player_proto;
Player.prototype.constructor = Player;

/* --- end generated code --- */

Player.prototype.afterCreate = function() {
	this.initX = this.x;
	this.initY = this.y;
	this.health = 3;
	this.onLadder = false;
	this.kind = "player";
};

Player.prototype.update = function() {
	if (this.onLadder) {
		this.body.gravity.y = 0;
	} else {
		this.body.gravity.y = 300;
	}
	this.onLadder = false;
};

Player.prototype.reset = function() {
	this.x = this.initX;
	this.y = this.initY;
	this.health = 3;
	this.body.velocity.y = 0;
	this.alive = true;
	this.animations.play('idle');
	this.hurtFlag = false;
};

Player.prototype.death = function() {
	this.alive = false;
	this.body.velocity.x = 0;
	this.body.velocity.y = -400;
};
