// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)

/**
 * Level.
 */
function Level() {

	Phaser.State.call(this);

}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function() {

	this.physics.startSystem(Phaser.Physics.ARCADE);

};

Level.prototype.preload = function() {

	this.load.pack('preloader', 'assets/pack.json');

};

Level.prototype.create = function() {
	this.stage.backgroundColor = "#3ed8fb";
	this.physics.startSystem(Phaser.Physics.ARCADE);
	this.physics.arcade.gravity.y = 654;
	this.world.setBounds(0, 0, 9640, 3600);
	var background = this.add.tileSprite(0, 0, 9640, 3600, 'sky');
	background.scale.set(10);
	background.autoScroll(10,0);
	var runway = new Array(2);
	runway[0] = this.add.tileSprite(0, 3180, 1650, 840, 'runway');
	runway[0].scale.set(1,0.5);
	runway[1] = this.add.tileSprite(1130, 3180, 1650, 840, 'runway');
	runway[1].scale.set(1,0.5);
	var ground = this.add.tileSprite(2780, 3395, 6845, 205, 'ground');
	this.physics.enable(runway,Phaser.Physics.ARCADE);
	this.physics.enable(ground,Phaser.Physics.ARCADE);
	runway[0].body.immovable = true;
	runway[0].body.moves = false;
	runway[1].body.immovable = true;
	runway[1].body.moves = false;
	ground.body.immovable = true;
	ground.body.moves = false;
	runway[0].body.setSize(1650,20,0,730);
	runway[1].body.setSize(1650,20,0,730);
	ground.body.setSize(6845,20,0,150);
	var audience = new Array(new Array(7),new Array(6),new Array(5));
	var audienceSeat = new Array(3);
	for(var i=0 ; i<3; i++){
		audienceSeat[i] = this.add.tileSprite(850*i, 3035, 1650, 840, 'audience_seat');
		audienceSeat[i].scale.set(0.8,0.8);
	}
	for(var k=0; k<3;k++)
	{
		for(var i=0;i<3;i++)
	    {
	    	for(var j=0;j<audience[i].length;j++)
	    	{
	    		var randomAd = Math.floor(Math.random()*8)%4;
	    		var randomFr = Math.floor(Math.random()*3);
	    		if (randomAd == 0){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y  + 80 * (i+1),'white_audience');   			
	    		}
	    		else if (randomAd == 1){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y + 80 * (i+1),'red_audience');
	    		}
	    		else if (randomAd == 2){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y +  80 * (i+1),'yellow_audience');
	    		}
	    		else if (randomAd == 3){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y + 80 * (i+1),'purple_audience');
	    		}
	    		audience[i][j].scale.set(4);
	    		audience[i][j].animations.add('cheer');
	    		audience[i][j].animations.play('cheer', 3, true);
	    		audience[i][j].animations.next(randomFr);
	    	}
	    }
	}
	var player = this.add.sprite(100, 3350,'player'); 
	var ac_ani = player.animations.add('accelerate',[0,1,2],30,true);
	var ms_ani = player.animations.add('ms',[3,4,5],30,true);
	var th_ani = player.animations.add('th',[6,7,8,9,10,11,12,13],30,false);
	player.animations.play('accelerate');
	player.animations.paused = true;
	this.physics.enable(player,Phaser.Physics.ARCADE);
	player.scale.set(6);
	player.body.allowGravity = true;
	player.body.bounce.setTo(0.1);
	player.body.collideWorldBounds = true;
	player.body.maxVelocity.set(800);
	var javelin = this.add.sprite(player.body.x+180,player.body.y+130,'javelin');
	javelin.anchor.x = 0.9;
	javelin.anchor.y = 0.5;
	this.physics.enable(javelin,Phaser.Physics.ARCADE);
	javelin.body.allowGravity = false;
	cursors = this.input.keyboard.createCursorKeys();
	space_key = this.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	this.camera.follow(player);

	this.fBackground = background;
	this.fRunway0 = runway[0];
	this.fRunway1 = runway[1];
	this.fGround = ground;
	this.fPlayer = player;
	this.fJavelin = javelin;

	this.afterCreate();

};

/* --- end generated code --- */

Level.prototype.afterCreate = function() {
	
};

Level.prototype.startMusic = function() {
	this.music = this.add.audio("music");
	this.music.loop = true;

	this.music.play();
};

Level.prototype.addAudios = function() {
	this.audioCarrot = this.add.audio("carrot");
	this.audioEnemyDeath = this.add.audio("enemy-death");
	this.audioHurt = this.add.audio("hurt");
	this.audioJump = this.add.audio("jump");
	this.audioStar = this.add.audio("star");
	this.audioChest = this.add.audio("chest");
};

Level.prototype.createTileMap = function() {
	
};

Level.prototype.update = function() {

	this.physics.arcade.collide(this.fGround,this.fPlayer);
	this.physics.arcade.collide(this.fGround,this.fJavelin);
	this.physics.arcade.collide(this.fRunway0, this.fPlayer);
	this.physics.arcade.collide(this.fRunway1, this.fPlayer);
	this.physics.arcade.collide(this.fRunway0, this.fJavelin);
	this.physics.arcade.collide(this.fRunway1, this.fJavelin);

	

	//this.movePlayer();
};

/*
Level.prototype.movePlayer = function() {
	if (!this.fPlayer.alive) {
		this.fPlayer.animations.play("hurt");
		return;
	}

	if (this.fPlayer.hurtFlag) {
		this.fPlayer.animations.play("hurt");
		return;
	}

	if (this.fPlayer.onLadder) {
		this.fPlayer.animations.play("climb");

		var vel = 30;
		if (this.wasd.duck.isDown) {
			this.fPlayer.body.velocity.y = vel;
		} else if (this.wasd.up.isDown) {
			this.fPlayer.body.velocity.y = -vel;
		}

		// horizontal

		if (this.wasd.left.isDown) {
			this.fPlayer.body.velocity.x = -vel;

			this.fPlayer.scale.x = -1;
		} else if (this.wasd.right.isDown) {
			this.fPlayer.body.velocity.x = vel;

			this.fPlayer.scale.x = 1;
		} else {
			this.fPlayer.body.velocity.x = 0;

		}

		return;
	}

	if (this.wasd.jump.isDown && this.fPlayer.body.onFloor()) {
		this.fPlayer.body.velocity.y = -200;
		this.audioJump.play();

	}

	var vel = 80;
	if (this.wasd.left.isDown) {
		this.fPlayer.body.velocity.x = -vel;
		this.moveAnimation();
		this.fPlayer.scale.x = -1;
	} else if (this.wasd.right.isDown) {
		this.fPlayer.body.velocity.x = vel;
		this.moveAnimation();
		this.fPlayer.scale.x = 1;
	} else {
		this.fPlayer.body.velocity.x = 0;
		this.stillAnimation();

	}
};

Level.prototype.moveAnimation = function() {
	if (this.fPlayer.body.velocity.y < 0) {
		this.fPlayer.animations.play("jump");
	} else if (this.fPlayer.body.velocity.y > 0) {
		this.fPlayer.animations.play("fall");
	} else {
		this.fPlayer.animations.play("skip");
	}
};

Level.prototype.stillAnimation = function() {
	if (this.fPlayer.body.velocity.y < 0) {
		this.fPlayer.animations.play("jump");
	} else if (this.fPlayer.body.velocity.y > 0) {
		this.fPlayer.animations.play("fall");
	} else if (this.wasd.duck.isDown) {
		this.fPlayer.animations.play("duck");
	} else {
		this.fPlayer.animations.play("idle");
	}
};
*/