// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)

/**
 * Level.
 */
function Level() {

	Phaser.State.call(this);

}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function() {

	this.physics.startSystem(Phaser.Physics.ARCADE);

};

Level.prototype.preload = function() {

	this.load.pack('preloader', 'assets/pack.json');

};

Level.prototype.create = function() {
	this.stage.backgroundColor = "#3ed8fb";
	this.physics.startSystem(Phaser.Physics.ARCADE);
	this.physics.arcade.gravity.y = 654;
	this.world.setBounds(0, 0, 9640, 3600);
	var background = this.add.tileSprite(0, 0, 9640, 3600, 'sky');
	background.scale.set(10);
	background.autoScroll(10,0);
	var runway = new Array(2);
	runway[0] = this.add.tileSprite(0, 3180, 1650, 840, 'runway');
	runway[0].scale.set(1,0.5);
	runway[1] = this.add.tileSprite(1130, 3180, 1650, 840, 'runway');
	runway[1].scale.set(1,0.5);
	var ground = this.add.tileSprite(2780, 3395, 6845, 205, 'ground');
	this.physics.enable(runway,Phaser.Physics.ARCADE);
	this.physics.enable(ground,Phaser.Physics.ARCADE);
	runway[0].body.immovable = true;
	runway[0].body.moves = false;
	runway[1].body.immovable = true;
	runway[1].body.moves = false;
	ground.body.immovable = true;
	ground.body.moves = false;
	runway[0].body.setSize(1650,20,0,730);
	runway[1].body.setSize(1650,20,0,730);
	ground.body.setSize(6845,20,0,150);
	var audience = new Array(new Array(7),new Array(6),new Array(5));
	var audienceSeat = new Array(3);
	for(var i=0 ; i<3; i++){
		audienceSeat[i] = this.add.tileSprite(850*i, 3035, 1650, 840, 'audience_seat');
		audienceSeat[i].scale.set(0.8,0.8);
	}
	for(var k=0; k<3;k++)
	{
		for(var i=0;i<3;i++)
	    {
	    	for(var j=0;j<audience[i].length;j++)
	    	{
	    		var randomAd = Math.floor(Math.random()*8)%4;
	    		var randomFr = Math.floor(Math.random()*3);
	    		if (randomAd == 0){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y  + 80 * (i+1),'white_audience');   			
	    		}
	    		else if (randomAd == 1){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y + 80 * (i+1),'red_audience');
	    		}
	    		else if (randomAd == 2){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y +  80 * (i+1),'yellow_audience');
	    		}
	    		else if (randomAd == 3){
	    			audience[i][j] = this.add.sprite(audienceSeat[k].x+420 + 64 * j+32*i, audienceSeat[k].y + 80 * (i+1),'purple_audience');
	    		}
	    		audience[i][j].scale.set(4);
	    		audience[i][j].animations.add('cheer');
	    		audience[i][j].animations.play('cheer', 3, true);
	    		audience[i][j].animations.next(randomFr);
	    	}
	    }
	}
	var player = new Player(this.game,100,3450);

	var javelin = new Javelin(this.game,player.x,player.y);
	
	cursors = this.input.keyboard.createCursorKeys();
	space_key = this.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
	
	this.decelerate = function(){player.body.acceleration.set(0);};
	this.camera.follow(player);
	
	this.fBackground = background;
	this.fRunway0 = runway[0];
	this.fRunway1 = runway[1];
	this.fGround = ground;
	this.fPlayer = player;
	this.fJavelin = javelin;
	this.fCursors = cursors;
	this.fSpace_key = space_key;
};

/* --- end generated code --- */

/*
Level.prototype.startMusic = function() {
	this.music = this.add.audio("music");
	this.music.loop = true;

	this.music.play();
};

Level.prototype.addAudios = function() {
	this.audioCarrot = this.add.audio("carrot");
	this.audioEnemyDeath = this.add.audio("enemy-death");
	this.audioHurt = this.add.audio("hurt");
	this.audioJump = this.add.audio("jump");
	this.audioStar = this.add.audio("star");
	this.audioChest = this.add.audio("chest");
};

Level.prototype.createTileMap = function() {
	
};
*/
var hitGround = false;
var hasFoul = false;
var exists = false;
var acc = false;
var acc2 = false;
var isUp =false;

Level.prototype.update = function() {
	
	this.physics.arcade.collide(this.fGround,this.fPlayer);
	this.physics.arcade.collide(this.fGround,this.fJavelin);
	this.physics.arcade.collide(this.fRunway0, this.fPlayer);
	this.physics.arcade.collide(this.fRunway1, this.fPlayer);
	this.physics.arcade.collide(this.fRunway0, this.fJavelin);
	this.physics.arcade.collide(this.fRunway1, this.fJavelin);
	
	if(this.fPlayer.body.velocity.x<2){
		StateIdle.play(this.fPlayer);	
	}
	
	if(this.fPlayer.state.StateName == "Idle" && this.fPlayer.body.velocity.x>2){
		this.fPlayer.state = StateAccelerate;
		StateAccelerate.play(this.fPlayer);
	}
	else if(this.fPlayer.state.StateName == "Idle"){ 
		this.keepUp("slow");
	}
	if(this.fPlayer.state.StateName == "Accelerating" && this.fPlayer.body.velocity.x<2){
		this.fPlayer.state = StateIdle;
		StateIdle.play(this.fPlayer);
	}
	else if(this.fPlayer.state.StateName == "Accelerating"){ 
		this.fPlayer.ac_ani.speed = Math.floor(this.fPlayer.body.velocity.x/50);
		this.keepUp("slow");
	}
	if(this.fPlayer.state.StateName == "Accelerating" && this.fPlayer.body.velocity.x>700){
		this.fPlayer.state = StateMaxSpeed;
		StateMaxSpeed.play(this.fPlayer);
	}
	if(this.fPlayer.state.StateName == "MaxSpeed" && this.fPlayer.body.velocity.x<650){
		this.fPlayer.state = StateAccelerate;
		StateAccelerate.play(this.fPlayer);
	}
	if(this.fPlayer.state.StateName == "MaxSpeed"){ 
		this.fPlayer.ms_ani.speed = Math.floor(this.fPlayer.body.velocity.x/50);
		this.keepUp("fast");
	}
	this.movePlayer();
};


Level.prototype.movePlayer = function() {
	if (!this.fPlayer.hasThrown && this.fCursors.right.isDown){
		acc = true;
	}
	else if(this.fCursors.right.isUp && !acc){
		this.fPlayer.body.drag.x = 1000;
	}
	else if (this.fCursors.right.isUp && acc && !this.fPlayer.hasThrown && !this.checkFoul())
    {
		this.fPlayer.body.drag.x = 0;
		this.fPlayer.body.acceleration.set(1000,0);
        setTimeout(this.decelerate, 100);
        acc = false;
    }
};

Level.prototype.keepUp = function(a){
	if(a == "slow"){
		this.fJavelin.body.x = this.fPlayer.body.x-100;
		this.fJavelin.body.y = this.fPlayer.body.y+120;
	}else if (a == "fast" && !this.fPlayer.hasThrown){
		this.fJavelin.body.x = this.fPlayer.body.x-100;
		this.fJavelin.body.y = this.fPlayer.body.y+55;
	}
}

Level.prototype.checkFoul= function() {
	if(this.fPlayer.body.x>=2680){
		return true;
	}
	return false;
};

/*

Level.prototype.moveAnimation = function() {
	if (this.fPlayer.body.velocity.y < 0) {
		this.fPlayer.animations.play("jump");
	} else if (this.fPlayer.body.velocity.y > 0) {
		this.fPlayer.animations.play("fall");
	} else {
		this.fPlayer.animations.play("skip");
	}
};

Level.prototype.stillAnimation = function() {
	if (this.fPlayer.body.velocity.y < 0) {
		this.fPlayer.animations.play("jump");
	} else if (this.fPlayer.body.velocity.y > 0) {
		this.fPlayer.animations.play("fall");
	} else if (this.wasd.duck.isDown) {
		this.fPlayer.animations.play("duck");
	} else {
		this.fPlayer.animations.play("idle");
	}
};
*/